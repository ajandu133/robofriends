{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobot","this","filter","robot","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bb13731e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib pa3 br4 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n// Destructing\r\n\r\n// simplify x1\r\n// const Card = (props) => {\r\n//     const { name, email, id } = props;\r\n//     return (\r\n//         <div className='tc bg-light-green dib pa3 br4 ma2 grow bw2 shadow-5'>\r\n//             <img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\r\n//             <div>\r\n//                 <h2>{name}</h2>\r\n//                 <p>{email}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// original\r\n// const Card = (props) => {\r\n//     return (\r\n//         <div className='tc bg-light-green dib pa3 br4 ma2 grow bw2 shadow-5'>\r\n//             <img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\r\n//             <div>\r\n//                 <h2>{props.name}</h2>\r\n//                 <p>{props.email}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }","import React from 'react';\r\nimport Card from './Card'\r\n// import { robots } from '../robots';\r\n\r\nconst CardList = ({ robots }) => {\r\n     return(   \r\n        robots.map((user, i) => {\r\n            return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n        })\r\n    );\r\n} \r\n\r\n\r\nexport default CardList;\r\n\r\n// loop created\r\n// const CardList = ({ robots }) => {\r\n//     const cardArray = robots.map((user, i) => {\r\n//         return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n// })\r\n//     return (\r\n//         <div>\r\n//           {cardArray}\r\n//         </div>\r\n//     );\r\n// } \r\n\r\n// original\r\n// const CardList = ({ robots }) => {\r\n    //     return (\r\n    //         <div>\r\n    //           <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n    //           <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n    //           <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n    //         </div>\r\n    //     );\r\n    //     } \r\n    \r\n// apply card & extra id from cards 1 & 2. I need them for all cards though.\r\n    // { robots } => {\r\n    //     <Card id={robots[0].id} />\r\n    //     <Card id={robots[1].id} />\r\n    // }\r\n// Use map function to create a new array applying Card & extrating from each object\r\n    // { robots } => {\r\n    //     robots.map((value, i) => {\r\n    //         return (\r\n    //             <Card id={robots[i].id} />\r\n    //         )\r\n    //     }\r\n    // }\r\n// This entire array is to be returned. This is the modded card list. \r\n    // const CardList = ({ robots }) => {\r\n    //     return (\r\n    //          robots.map((value, i) => {\r\n    //             return (<Card id={robots[i].id} />)\r\n    //         }\r\n    //     )\r\n    // )\r\n// }","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input\r\n             className='pa3 ba b--green bg-lightest-blue'\r\n             type='search' \r\n             placeholder='search robots' \r\n             onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n\r\n// every time the search box is modified i.e onChange, call the {searchChange} function\r\n// {searchChange} is a prop of App\r\n//{searchChange} prop is the this.onSearchChange function in APP\r\n// triggers console.log\r\n\r\n// class App extends Component {\r\n//     constructor() {\r\n//         super()\r\n//         this.state = {\r\n//             robots: robots,\r\n//             searchfields: ''\r\n//         }\r\n//     }\r\n//     onSearchChange(event) {\r\n//         console.log(event.target.value)\r\n//     }\r\n//     render() {\r\n//         return(\r\n//         <div className= 'tc'>\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox searchChange={this.onSearchChange}/>\r\n//             <CardList robots={this.state.robots}/>\r\n//         </div>\r\n//             )\r\n//         }\r\n// }\r\n\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import { robots } from '../robots';\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots: users}))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n            this.setState({ searchfield: event.target.value })\r\n    }\r\n    \r\n    render() {\r\n        const filteredRobot = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if (this.state.robots.length === 0) {\r\n            return <h1 className='tc'>Loading</h1>\r\n        } else {\r\n        return(\r\n        <div className= 'tc'>\r\n            <h1 className = 'f1'>RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n                <CardList robots={filteredRobot}/>\r\n            </Scroll>\r\n        </div>\r\n            )\r\n    }}\r\n}\r\n\r\nexport default App\r\n\r\n// App walkthrough\r\n// We create aa class app with components such as contructor\r\n// the consuctor creates a state, rob0ts & search field which only lives in App\r\n// class App passes down props, such as onSearchChange to SearchBox\r\n// everytime there is onChange in the Input, it refers to prop searchChange which activates function onSearch change which\r\n// updates the state of the search field with the event/to what we type \r\n// with information from event of search box, we communicate with CardList\r\n// tell Cardlist to filter only what includes the search field\r\n\r\n// instead of passing robots = this.state.robots we pass filtered robots to pick one name\r\n\r\n// does there need to be a state robots? as it never really changes. not really but this is good practice\r\n\r\n\r\n    \r\n\r\n// STATE object that can change and effect application\r\n//  in this app State is what comes into search box\r\n//  in this app state is which robot we choose\r\n// \r\n//original code\r\n//  const App = () => {\r\n//     return(\r\n//         <div className= 'tc'>\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox/>\r\n//             <CardList robots={robots}/>\r\n//          </div>\r\n//         )\r\n//         }\r\n//     export default App\r\n\r\n// conversion to App extends. Also change top line to React, { Component }\r\n// class App extends Component {\r\n//     render() {\r\n//     return(\r\n//     <div className= 'tc'>\r\n//         <h1>RoboFriends</h1>\r\n//         <SearchBox/>\r\n//         <CardList robots={robots}/>\r\n//      </div>\r\n//      )\r\n//     }\r\n// }\r\n\r\n// add states to code using constructor\r\n// class App extends Component {\r\n//     constructor() {\r\n//         super()\r\n//         this.state = {\r\n//             robots: robots,\r\n//             searchfields: ''\r\n//         }\r\n//     }\r\n//     render() {\r\n//         return(\r\n//         <div className= 'tc'>\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox/>\r\n//             <CardList robots={robots}/>\r\n//         </div>\r\n//             )\r\n//         }\r\n// }\r\n\r\n// link the input search box to this file and log clikck in console log\r\n// class App extends Component {\r\n//     constructor() {\r\n//         super()\r\n//         this.state = {\r\n//             robots: robots,\r\n//             searchfield: ''\r\n//         }\r\n//     }\r\n//     onSearchChange = (event) => {\r\n//           console.log(event)\r\n//     }\r\n    \r\n//     render() {\r\n//         return(\r\n//         <div className= 'tc'>\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox searchChange={this.onSearchChange}/>\r\n//             <CardList robots={this.state.robots}/>\r\n//         </div>\r\n//             )\r\n//         }\r\n// }\r\n\r\n// right before we move const filteredRobots under return to call the robot we want from the card list\r\n// class App extends Component {\r\n//     constructor() {\r\n//         super()\r\n//         this.state = {\r\n//             robots: robots,\r\n//             searchfield: ''\r\n//         }\r\n//     }\r\n//     onSearchChange = (event) => {\r\n//             this.setState({ searchfield: event.target.value })\r\n//             const filteredRobots = this.state.robots.filter(robot => {\r\n//             return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n//         })\r\n//     }\r\n    \r\n//     render() {\r\n//         return(\r\n//         <div className= 'tc'>\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox searchChange={this.onSearchChange}/>\r\n//             <CardList robots={this.state.robots}/>\r\n//         </div>\r\n//             )\r\n//         }\r\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  // <React.StrictMode>\n        <App/>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//         <div>\n//           <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n//           <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n//           <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n//         </div>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n"],"sourceRoot":""}